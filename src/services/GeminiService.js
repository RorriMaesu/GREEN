// GeminiService.js
// This service handles interactions with Gemini API for weather data and garden recommendations

/**
 * GeminiService provides methods to interact with Google's Gemini API
 * for fetching weather data and generating intelligent gardening recommendations
 * based on local weather patterns for Winston, Oregon
 */
export default class GeminiService {
  /**
   * Create a new GeminiService instance
   * @param {string} apiKey - The Gemini API key from user settings
   */
  constructor(apiKey) {
    this.apiKey = apiKey;
  }

  /**
   * Initialize the Gemini client with the provided API key
   * @returns {boolean} Success status of initialization
   */
  async initialize() {
    try {
      // Basic validation of API key format
      if (!this.apiKey || this.apiKey.length < 10) {
        throw new Error('Invalid API key format');
      }
      
      // We're not actually initializing Google's SDK here to avoid exposing secrets
      // In a real implementation, we would use @google/genai SDK
      this._initialized = true;
      return true;
    } catch (error) {
      console.error('Failed to initialize Gemini service:', error);
      this._initialized = false;
      return false;
    }
  }

  /**
   * Check if the service is initialized with a valid API key
   * @returns {boolean} Initialization status
   */
  isInitialized() {
    return this._initialized;
  }

  /**
   * Fetch current weather data for Winston, Oregon
   * This would normally use the Gemini API to search for and parse weather data
   * @returns {Promise<Object>} Weather data object
   */
  async getCurrentWeather() {
    try {
      if (!this.isInitialized()) {
        throw new Error('Gemini service not initialized');
      }

      // In a real implementation, we would make an API call to Gemini to search for weather data
      // For demo purposes, we're simulating the response with current data
      const month = new Date().getMonth();
      const day = new Date().getDate();
      
      // Simulated weather data for Winston, OR (would be fetched via Gemini in production)
      const simulatedWeatherData = {
        temperature: this._getSeasonalTemperature(month),
        conditions: this._getSeasonalConditions(month),
        precipitation: this._getRandomPrecipitation(month),
        forecast: this._getRandomForecast(month),
        recentTrends: this._getRandomTrends(month),
        fetchedAt: new Date().toISOString(),
        source: 'Simulated data (would use Gemini in production)'
      };

      return simulatedWeatherData;
    } catch (error) {
      console.error('Error fetching weather data:', error);
      throw error;
    }
  }

  /**
   * Get personalized gardening recommendations based on current weather and seasonal patterns
   * @param {Object} weatherData - The current weather data
   * @returns {Promise<Object>} Gardening recommendations
   */
  async getGardeningRecommendations(weatherData) {
    try {
      if (!this.isInitialized()) {
        throw new Error('Gemini service not initialized');
      }

      // In a real implementation, we would send the weather data to Gemini API
      // and get intelligent recommendations based on current conditions
      
      const month = new Date().getMonth();
      const currentTemperature = weatherData.temperature.current;
      
      // Simulated recommendations (would be generated by Gemini in production)
      const simulatedRecommendations = {
        urgent: this._getUrgentRecommendations(weatherData),
        watering: this._getWateringRecommendations(weatherData),
        planting: this._getPlantingRecommendations(month, weatherData),
        maintenance: this._getMaintenanceRecommendations(month, weatherData),
        weatherAlert: this._getWeatherAlerts(weatherData),
        generatedAt: new Date().toISOString(),
        source: 'Simulated recommendations (would use Gemini in production)'
      };

      return simulatedRecommendations;
    } catch (error) {
      console.error('Error generating recommendations:', error);
      throw error;
    }
  }

  // Helper methods to generate simulated data based on season
  
  _getSeasonalTemperature(month) {
    // Winston OR average temperatures by month (approximate)
    const avgHighs = [48, 53, 58, 63, 70, 77, 85, 85, 79, 67, 54, 47];
    const avgLows = [34, 36, 38, 41, 46, 51, 54, 54, 49, 43, 39, 35];
    
    // Add some randomness to make it feel like real-time data
    const currentHigh = avgHighs[month] + Math.floor(Math.random() * 7) - 3;
    const currentLow = avgLows[month] + Math.floor(Math.random() * 5) - 2;
    const current = Math.round((currentHigh + currentLow) / 2);
    
    return {
      current,
      high: currentHigh,
      low: currentLow,
      avgHigh: avgHighs[month],
      avgLow: avgLows[month]
    };
  }

  _getSeasonalConditions(month) {
    // Simplified weather patterns for Winston, OR by season
    const conditions = [
      // Winter (Dec-Feb)
      ['Rainy', 'Overcast', 'Partly Cloudy', 'Light Rain', 'Foggy'],
      ['Rainy', 'Overcast', 'Partly Cloudy', 'Light Rain', 'Foggy'],
      // Spring (Mar-May)
      ['Partly Cloudy', 'Light Rain', 'Overcast', 'Sunny', 'Scattered Showers'],
      ['Partly Cloudy', 'Light Rain', 'Sunny', 'Scattered Showers', 'Clear'],
      ['Partly Cloudy', 'Sunny', 'Clear', 'Scattered Showers', 'Warm'],
      // Summer (Jun-Aug)
      ['Sunny', 'Clear', 'Warm', 'Hot', 'Dry'],
      ['Sunny', 'Clear', 'Hot', 'Very Hot', 'Dry'],
      ['Sunny', 'Clear', 'Hot', 'Very Hot', 'Dry'],
      // Fall (Sep-Nov)
      ['Sunny', 'Clear', 'Partly Cloudy', 'Mild', 'Morning Fog'],
      ['Partly Cloudy', 'Morning Fog', 'Light Rain', 'Overcast', 'Mild'],
      ['Rainy', 'Overcast', 'Light Rain', 'Foggy', 'Cool'],
      // Back to winter (Dec)
      ['Rainy', 'Overcast', 'Light Rain', 'Foggy', 'Cold']
    ];
    
    const monthConditions = conditions[month];
    // Return a random condition from the season's typical conditions
    return monthConditions[Math.floor(Math.random() * monthConditions.length)];
  }

  _getRandomPrecipitation(month) {
    // Average precipitation chances by month for Winston OR (approximate)
    const precipChances = [70, 65, 60, 50, 35, 20, 5, 5, 20, 40, 65, 75];
    const chance = precipChances[month];
    
    // If it's likely to precipitate, calculate an amount
    if (Math.random() * 100 < chance) {
      // Monthly average precipitation in inches (approximate)
      const avgPrecip = [5.5, 4.8, 4.2, 2.8, 1.8, 0.9, 0.4, 0.5, 1.0, 2.5, 5.0, 6.0];
      // Calculate a daily amount as a fraction of monthly
      const amount = ((avgPrecip[month] / 30) * (Math.random() + 0.5)).toFixed(2);
      return { chance, amount, unit: 'inches' };
    } else {
      return { chance, amount: 0, unit: 'inches' };
    }
  }

  _getRandomForecast(month) {
    // Generate a simple 3-day forecast
    const forecast = [];
    for (let i = 1; i <= 3; i++) {
      const forecastMonth = month; // Simplified - would normally account for month boundaries
      const temp = this._getSeasonalTemperature(forecastMonth);
      const condition = this._getSeasonalConditions(forecastMonth);
      const precipitation = this._getRandomPrecipitation(forecastMonth);
      
      forecast.push({
        day: i,
        high: temp.high + Math.floor(Math.random() * 5) - 2, // Add some variation
        low: temp.low + Math.floor(Math.random() * 5) - 2,
        condition,
        precipChance: precipitation.chance
      });
    }
    
    return forecast;
  }

  _getRandomTrends(month) {
    // Trends based on season
    const seasonTrends = [
      // Winter
      ['Colder than average', 'Wetter than average', 'Normal temperatures', 'Drier than average'],
      ['Colder than average', 'Wetter than average', 'Normal temperatures', 'Drier than average'],
      // Spring
      ['Warming trend', 'More rainfall than usual', 'Normal spring pattern', 'Early warming trend'],
      ['Warming trend', 'More rainfall than usual', 'Normal spring pattern', 'Early warming trend'],
      ['Warming faster than average', 'Less rainfall than usual', 'Normal temperatures', 'Early summer pattern'],
      // Summer
      ['Hotter than average', 'Drier than usual', 'Normal summer pattern', 'Fire danger increasing'],
      ['Hotter than average', 'Drier than usual', 'Heat wave potential', 'Fire danger high'],
      ['Cooling trend starting', 'Continued dry conditions', 'Normal late summer pattern', 'Early fall pattern'],
      // Fall
      ['Cooling trend', 'Increasing rainfall', 'Normal fall pattern', 'Early frost potential'],
      ['Cooling faster than average', 'Increasing rainfall', 'Normal fall pattern', 'First frost approaching'],
      ['Cooling trend', 'Wetter than average', 'Normal temperatures', 'Winter pattern establishing'],
      // Winter again
      ['Colder than average', 'Wetter than average', 'Normal temperatures', 'Drier than average']
    ][month];
    
    return seasonTrends[Math.floor(Math.random() * seasonTrends.length)];
  }

  _getUrgentRecommendations(weatherData) {
    const urgent = [];
    const { temperature, conditions, precipitation } = weatherData;
    
    // Check for frost risk
    if (temperature.low <= 36) {
      urgent.push({
        type: 'frost',
        severity: 'high',
        message: 'Frost risk tonight! Protect sensitive plants with covers or bring potted plants indoors.'
      });
    }
    
    // Check for extreme heat
    if (temperature.high >= 90) {
      urgent.push({
        type: 'heat',
        severity: 'high',
        message: 'Extreme heat! Water deeply in the early morning and consider temporary shade for sensitive plants.'
      });
    }
    
    // Check for heavy rain
    if (precipitation.amount > 0.5) {
      urgent.push({
        type: 'rain',
        severity: 'medium',
        message: 'Heavy rain expected. Check drainage in garden beds and containers.'
      });
    }
    
    // If no urgent matters, return a general health recommendation
    if (urgent.length === 0) {
      const month = new Date().getMonth();
      const seasonalTips = [
        'Continue winter mulching to protect roots from freezing.',
        'Check for signs of early pest activity as temperatures warm.',
        'Begin hardening off seedlings for outdoor planting.',
        'Monitor for aphids and other early season pests emerging.',
        'Check irrigation systems for summer readiness.',
        'Monitor for signs of heat stress in leafy greens.',
        'Provide shade for heat-sensitive plants during peak hours.',
        'Check plants frequently for signs of drought stress.',
        'Begin planning for fall crops and succession planting.',
        'Prepare to protect plants from early fall frosts.',
        'Clean up garden beds to reduce overwintering pests.',
        'Apply winter mulch to protect perennial plants.'
      ];
      
      urgent.push({
        type: 'maintenance',
        severity: 'low',
        message: seasonalTips[month]
      });
    }
    
    return urgent;
  }

  _getWateringRecommendations(weatherData) {
    const { temperature, conditions, precipitation } = weatherData;
    
    // Base recommendation on current conditions
    let frequency, amount, timing;
    
    // Check temperature ranges
    if (temperature.high >= 85) {
      frequency = 'Daily';
      amount = 'Deep watering';
      timing = 'Very early morning (before 7am)';
    } else if (temperature.high >= 75) {
      frequency = 'Every 2-3 days';
      amount = 'Moderate to deep';
      timing = 'Morning';
    } else if (temperature.high >= 60) {
      frequency = 'Every 3-4 days';
      amount = 'Moderate';
      timing = 'Morning or evening';
    } else {
      frequency = 'As needed, check soil moisture';
      amount = 'Light to moderate';
      timing = 'Late morning';
    }
    
    // Adjust for precipitation
    if (precipitation.amount > 0.25) {
      frequency = 'Delay watering until soil begins to dry';
      amount = 'Check soil moisture before watering';
    }
    
    // Adjust for conditions
    if (conditions.includes('Dry') || conditions.includes('Hot')) {
      frequency = frequency === 'Daily' ? 'Twice daily for containers' : 'Increase frequency';
    } else if (conditions.includes('Rainy') || conditions.includes('Overcast')) {
      frequency = 'Reduce frequency, check soil moisture';
    }
    
    return {
      frequency,
      amount,
      timing,
      note: 'Always water at the base of plants to minimize disease risk.'
    };
  }

  _getPlantingRecommendations(month, weatherData) {
    // Monthly planting guide for Winston, OR (Zone 8b/9a)
    const plantingGuides = [
      // January
      {
        indoor: ['Onions', 'Leeks', 'Early tomatoes (late month)'],
        outdoor: ['Bare-root trees and shrubs', 'Garlic (if not planted in fall)'],
        avoid: ['Most direct seeding', 'Warm-season crops']
      },
      // February
      {
        indoor: ['Tomatoes', 'Peppers', 'Eggplant', 'Broccoli', 'Cabbage'],
        outdoor: ['Bare-root plants', 'Asparagus crowns', 'Rhubarb'],
        avoid: ['Direct seeding tender crops']
      },
      // March
      {
        indoor: ['Warm-season herbs', 'Cucumbers', 'Melons'],
        outdoor: ['Peas', 'Spinach', 'Radishes', 'Carrots', 'Potatoes', 'Onion sets'],
        avoid: ['Heat-loving crops outdoors']
      },
      // April
      {
        indoor: ['Pumpkins', 'Squash', 'Basil'],
        outdoor: ['Beets', 'Carrots', 'Chard', 'Lettuce', 'Kale', 'Broccoli transplants'],
        avoid: ['Planting heat-loving crops too early']
      },
      // May
      {
        indoor: ['Late season crops'],
        outdoor: ['Beans', 'Corn', 'Tomato transplants (after mid-month)', 'Cucumber', 'Squash'],
        avoid: ['Missing the spring planting window for cool-season crops']
      },
      // June
      {
        indoor: ['Fall broccoli/cabbage (late month)'],
        outdoor: ['Heat-loving transplants', 'Beans', 'Corn', 'Succession lettuce (shade)'],
        avoid: ['Cool-season crops that will mature in heat']
      },
      // July
      {
        indoor: ['Fall/winter vegetables'],
        outdoor: ['Succession plantings of beans', 'Fall peas', 'Fall root crops'],
        avoid: ['Planting varieties that won't mature before frost']
      },
      // August
      {
        indoor: ['Cold frames for extending season'],
        outdoor: ['Fall lettuces', 'Spinach', 'Radishes', 'Kale', 'Cover crops'],
        avoid: ['Crops that need long season to mature']
      },
      // September
      {
        indoor: ['Overwintering crops under protection'],
        outdoor: ['Garlic', 'Spinach', 'Quick radishes', 'Cover crops', 'Fava beans'],
        avoid: ['Summer crops too late to mature']
      },
      // October
      {
        indoor: ['Season extension setups'],
        outdoor: ['Garlic', 'Shallots', 'Cover crops', 'Broad beans'],
        avoid: ['Most plantings except under protection']
      },
      // November
      {
        indoor: ['Planning next year's garden'],
        outdoor: ['Last chance for garlic', 'Bare-root trees (late month)'],
        avoid: ['Most plantings']
      },
      // December
      {
        indoor: ['Early seed organization', 'Sprouts for eating'],
        outdoor: ['Bare-root trees and shrubs (dormant)'],
        avoid: ['Any outdoor seeding']
      }
    ];
    
    // Get the current planting guide plus weather adjustments
    const guide = plantingGuides[month];
    
    // Adjust based on current weather
    const { temperature, conditions } = weatherData;
    let adjustments = [];
    
    if (temperature.low <= 35) {
      adjustments.push('Delay outdoor planting until temperatures warm');
    }
    
    if (temperature.high >= 85 && month >= 4 && month <= 8) {
      adjustments.push('Provide afternoon shade for cool-season plantings');
    }
    
    if (conditions.includes('Rainy') || conditions.includes('Heavy Rain')) {
      adjustments.push('Wait for soil to dry slightly before working or planting');
    }
    
    return {
      ...guide,
      adjustments: adjustments.length > 0 ? adjustments : ['No weather-based adjustments needed']
    };
  }

  _getMaintenanceRecommendations(month, weatherData) {
    // Monthly maintenance tasks for Winston, OR gardens
    const maintenanceTasks = [
      // January
      ['Prune dormant trees and shrubs', 'Plan garden layout', 'Order seeds', 'Clean and sharpen tools'],
      // February
      ['Finish pruning deciduous trees', 'Cut back ornamental grasses', 'Apply dormant sprays if needed', 'Set up irrigation systems'],
      // March
      ['Add compost to beds', 'Apply mulch as soil warms', 'Monitor for early pests', 'Fertilize established plants'],
      // April
      ['Thin developing seedlings', 'Monitor for slugs and aphids', 'Begin regular watering as needed', 'Set up supports for climbing plants'],
      // May
      ['Thin fruit on trees', 'Begin regular pest monitoring', 'Establish summer watering routine', 'Stake taller plants'],
      // June
      ['Apply mulch to conserve moisture', 'Weed consistently', 'Begin regular harvesting', 'Monitor irrigation needs'],
      // July
      ['Maintain consistent watering', 'Monitor for pests and disease', 'Harvest regularly', 'Remove spent blooms'],
      // August
      ['Continue consistent watering', 'Monitor for signs of drought stress', 'Save seeds from open-pollinated plants', 'Prepare areas for fall crops'],
      // September
      ['Begin fall cleanup', 'Harvest mature crops', 'Prepare for frost protection', 'Plant cover crops in empty beds'],
      // October
      ['Clear spent summer plants', 'Collect and compost leaves', 'Protect tender perennials', 'Clean and store plant supports'],
      // November
      ['Cut back perennials', 'Apply winter mulch', 'Protect sensitive plants', 'Clean and store tools'],
      // December
      ['Protect cold frames and greenhouses', 'Review garden successes and failures', 'Order specialty seeds', 'Protect vulnerable plants from heavy snow']
    ][month];
    
    // Adjust based on current weather conditions
    const { temperature, conditions } = weatherData;
    let weatherBasedTasks = [];
    
    if (temperature.high >= 85) {
      weatherBasedTasks.push('Check plants for heat stress in afternoon');
      weatherBasedTasks.push('Water deeply during cooler parts of the day');
    }
    
    if (temperature.low <= 35) {
      weatherBasedTasks.push('Protect sensitive plants from frost');
      weatherBasedTasks.push('Hold off on fertilizing during cold periods');
    }
    
    if (conditions.includes('Rainy') || conditions.includes('Heavy Rain')) {
      weatherBasedTasks.push('Check garden for proper drainage');
      weatherBasedTasks.push('Monitor for signs of fungal diseases');
    }
    
    if (conditions.includes('Dry') || conditions.includes('Hot')) {
      weatherBasedTasks.push('Apply mulch to conserve soil moisture');
      weatherBasedTasks.push('Prioritize water-efficient irrigation methods');
    }
    
    return {
      regularTasks: maintenanceTasks,
      weatherBasedTasks: weatherBasedTasks.length > 0 ? weatherBasedTasks : ['No additional weather-based tasks']
    };
  }

  _getWeatherAlerts(weatherData) {
    const { temperature, conditions, precipitation } = weatherData;
    const alerts = [];
    
    // Temperature alerts
    if (temperature.low < 32) {
      alerts.push({
        type: 'frost',
        severity: 'high',
        message: 'Hard freeze expected. Protect sensitive plants and irrigation systems.'
      });
    } else if (temperature.low < 36) {
      alerts.push({
        type: 'frost',
        severity: 'medium',
        message: 'Light frost possible. Cover tender plants or bring containers indoors.'
      });
    }
    
    if (temperature.high > 95) {
      alerts.push({
        type: 'heat',
        severity: 'high',
        message: 'Extreme heat alert. Provide shade, water deeply in early morning, and monitor for stress.'
      });
    } else if (temperature.high > 85) {
      alerts.push({
        type: 'heat',
        severity: 'medium',
        message: 'Heat alert. Ensure adequate watering and consider afternoon shade for sensitive plants.'
      });
    }
    
    // Precipitation alerts
    if (precipitation.amount > 1.0) {
      alerts.push({
        type: 'rain',
        severity: 'high',
        message: 'Heavy rain alert. Check drainage, secure plants, and watch for erosion or waterlogging.'
      });
    } else if (precipitation.amount > 0.5) {
      alerts.push({
        type: 'rain',
        severity: 'medium',
        message: 'Significant rainfall expected. Delay watering and monitor garden drainage.'
      });
    }
    
    // Condition alerts
    if (conditions.includes('Windy') || conditions.includes('Gusty')) {
      alerts.push({
        type: 'wind',
        severity: 'medium',
        message: 'Wind alert. Secure trellises, protect seedlings, and check for damage after wind subsides.'
      });
    }
    
    return alerts.length > 0 ? alerts : [{ type: 'none', severity: 'low', message: 'No current weather alerts for gardening' }];
  }
}
